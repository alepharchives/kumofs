#!/usr/bin/env ruby

# めたくそ汚いけど。。。使い捨てだし。。。いっかな。。。

# TODO
# - 引数で svr と mgr のアドレス受けるように
# - 引数かenvでsleep時間とループしないのを指定できるように
# - 例外がでるお
# /usr/local/app/kumofs/bin/kumoctl:59:in `sysread': Interrupted system call (Errno::EINTR)
#         from /usr/local/app/kumofs/bin/kumoctl:59:in `receive_message'
#         from /usr/local/app/kumofs/bin/kumoctl:75:in `synchronize_response'
#         from /usr/local/app/kumofs/bin/kumoctl:94:in `send_request_sync'
#         from /usr/local/app/kumofs/bin/kumoctl:99:in `send_request_sync_ex'
#         from /usr/local/app/kumofs/bin/kumoctl:119:in `GetStatus'
#         from ./kill-and-start-svr:67:in `fault_count'
#         from ./kill-and-start-svr:137

[
  File.dirname(__FILE__) + "/kumostat",
  "/usr/local/app/kumofs/bin/kumostat",
  File.dirname(__FILE__) + "/kumoctl",
  "/usr/local/app/kumofs/bin/kumoctl",
].each do |f|
  if File.exists?(f)
    load f
    break
  end
end

require "chukan"
include Chukan
require "resolv"
require "time"

module KumoServerOperation
  def renew_db
    FileUtils.safe_unlink("/kumo/100/db.tch")
    FileUtils.copy_file("/kumo/100/_db.tch", "/kumo/100/db.tch", true)
  end
end

class Manager
  attr_reader :host, :port

  def initialize(host, port)
    @host = host
    @port = port
  end

  def _connect
    KumoManager.new(@host, @port)
  end

  def fault_count
    fc = 0
    attached, not_attached, date, clock = _connect.GetStatus
    attached.each do |addr, port, active|
      fc = fc + 1 if ! active
    end
    return fc
  end

  def active?(ip)
    3.times do |i|
      #warn "#{i}"
      begin
        attached, not_attached, date, clock = _connect.GetStatus
        attached.each do |addr, port, active|
          #puts addr + " vs " + ip + " " + active.to_s
          if addr == ip && !active
            # warn ip + " is down"
            return true
          end
        end
      rescue
      end
      sleep 4
    end
    return false
  end

  def not_attach?(ip)
    3.times do |i|
      #warn "#{i}"
      begin
        attached, not_attached, date, clock = _connect.GetStatus
        not_attached.each do |addr, port|
          #warn addr + " vs " + ip
          if addr == ip
            #warn ip + " is up"
            return true
          end
        end
      rescue
      end
      sleep 4
    end
    return false
  end

  def attach
    3.times do |i|
      begin
        _connect.AttachNewServers(true)
      rescue
      end
    end
  end

end

@Debug = 1
def dprint(*args)
  STDERR.print(Time.now.strftime("%Y-%m-%d %H:%M:%S"),' DEBUG:[',caller.first,'] ',args,"\n") if @Debug >= 1
end

STDOUT.sync = true
STDERR.sync = true

@svr_host = "s101" # fixme
@svr_ip   = Resolv.getaddress(@svr_host)
@svr_host ||= "localhost"
@svr_port ||= KumoRPC::SERVER_DEFAULT_PORT
printf "svr=%s:%d\n", @svr_host, @svr_port
#@svr = Node.new(@svr_host, @svr_port)

@mgr_host = "s102" # fixme
@mgr_port = KumoRPC::MANAGER_DEFAULT_PORT

do_loop = true

while do_loop
  while true
    mgr = Manager.new(@mgr_host, @mgr_port);
    dprint "spawn server process"
    svr = spawn("/home/hirose31/LOCAL/run-svr")
    svr.extend KumoServerOperation
    svr.stdout_join("new node")
    dprint "pid=" + svr.pid.to_s

    if ! mgr.not_attach?(@svr_ip)
      abort "[WARN] svr down?"
      #break
    end
    #puts "attach server?"; STDIN.gets
    dprint "do attach\n"
    mgr.attach
    dprint "OK\n"

    sleep 15

    fc = mgr.fault_count
    dprint "fault server: #{fc}"
    if fc >= 2
      break
    end
    #puts "kill server?"; STDIN.gets

    dprint "kill svr node..."
    #svr.term
    svr.kill
    svr.stdout_join("end")
    svr.join
    if ! mgr.active?(@svr_ip)
      abort "[WARN] svr running?"
      #break
    end

    dprint "renew db file"
    svr.renew_db

    break
  end

  #do_loop = false # fixme
  sleep 5
end
